COMPILER DCasm

	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  firstDigit = "0123".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  registerNum = "$" [firstDigit] digit.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab


PRODUCTIONS
/*------------------------------------------------------------------------*/
DCasm
= (. INode exp; exp = new Error(); .) 
"program" 
{ 
  (
    arithm<out exp>
    |
    immediateLoad<out exp> 
    |
    data<out exp>
  )
  (. gen.treeRoot.Childrens.Add(exp); .)
} 
EOF.


register<out Register node> 
= registerNum (. node = new Register(); node.Value = t.val; .).


constant<out Const val>
= number (.val = new Const(t.val); .).


arithm<out INode exp>
= (. exp = new Error();.)
  (
    arithmOp<out string op> 
    register<out Register dest> 
    register<out Register src1> 
    (
      register<out Register src2> 
      (.exp = ArithmFactory.Create(op, dest, src1, src2); .)
      |
      constant<out Const src2> 
      (.exp = ArithmFactory.Create(op, dest, src1, src2); .)
    )
  )
.

immediateLoad<out INode exp>
= 
(. exp = new Error(); .)
(
  "li" (. exp = new ImmediateLoad(false); .)
  |
  "lui" (. exp = new ImmediateLoad(true); .)
)
register<out Register dest> constant<out Const val> (. exp.Childrens.Add(dest); exp.Childrens.Add(val); .)
.

arithmOp<out string op>
= (. op = "";.)
  ("add" | "sub" | "div" | "mul" ) (. op = t.val; .)
.


data<out INode exp>
=
(. exp = new Error(); INode temp;.)
(
  "mov" register<out Register dest> register<out Register source> (. exp = new Move(source, dest); .)
  |
  "out" register<out Register OutputSelection> 
    (
      register<out Register val> (. exp = new Write(OutputSelection, val); .)
      | 
      constant<out Const val> (. exp = new Write(OutputSelection, val); .)
    ) 
  |
  "in" register<out Register inputSelection> register<out Register dest> (. exp = new Read(inputSelection, dest); .)
  |
  "lw" register<out Register dest> register<out Register baseReg> constant<out Const offset> (. exp = new Load(dest, baseReg, offset); .)
  |
  "sw" register<out Register value> register<out Register baseReg> constant<out Const offset> (. exp = new Store(baseReg, offset, value); .) 
)
.

END DCasm.