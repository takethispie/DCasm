COMPILER DCasm

	public CodeGenerator gen;
  public NodeFactory factory;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  firstDigit = "0123".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  registerNum = "$" [firstDigit] digit.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab


PRODUCTIONS
/*------------------------------------------------------------------------*/
DCasm
= "program" { arithm<out INode exp> } EOF.


register<out INode node> 
= registerNum (. node = factory.Create("register"); .).


constant<out INode val>
= number (.val = factory.Create("Const"); val.Value = t.val; .).


arithm<out INode exp>
= (. exp = factory.Create("Error"); .)
  (
    arithmOp<out string op> 
    register<out INode dest> 
    register<out INode src1> 
    register<out INode src2> (. exp = factory.Create(op); exp.Childrens.Add(dest); exp.Childrens.Add(src1); exp.Childrens.Add(src2); .)
    |
    arithmImOp<out string op> 
    register<out INode dest> 
    register<out INode src1> 
    constant<out INode imm> (. exp = factory.Create(op); exp.Childrens.Add(dest); exp.Childrens.Add(src1); exp.Childrens.Add(imm); .)
  ).


arithmOp<out string op>
= ("add" | "sub" | "div" | "mul") (. op = t.val; .).


arithmImOp<out string op>
= ("addi" | "subu" | "divu" | "mulu") (. op = t.val; .).

END DCasm.