COMPILER DCasm

	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  firstDigit = "0123".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  registerNum = "$" [firstDigit] digit.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab


PRODUCTIONS
/*------------------------------------------------------------------------*/
DCasm
= (. INode exp; exp = new Error(); .) 
"program" 
{ 
  (
    arithm<out exp>
    |
    immediateLoad<out exp> 
  )
  (. gen.treeRoot.Childrens.Add(exp); .)
} 
EOF.


register<out Register node> 
= registerNum (. node = new Register(); node.Value = t.val; .).


constant<out Const val>
= number (.val = new Const(t.val); .).


arithm<out INode exp>
= (. exp = new Error(); bool unsigned = false; .)
  (
    arithmOp<out string op> 
    ["uns" (. unsigned = true; .)]
    register<out Register dest> 
    register<out Register src1> 
    (
      register<out Register src2> 
      (.exp = ArithmFactory.Create(op, dest, src1, src2); .)
      |
      constant<out Const src2> 
      (.exp = ArithmFactory.Create(op, dest, src1, src2); .)
    )
  )
.

immediateLoad<out INode exp>
= 
"li" register<out Register dest> constant<out Const val>
(. exp = new ImmediateLoad(); exp.Childrens.Add(dest); exp.Childrens.Add(val); .)
.


arithmOp<out string op>
= (. op = "";.)
  ("add" | "sub" | "div" | "mul" ) (. op = t.val; .)
.

END DCasm.