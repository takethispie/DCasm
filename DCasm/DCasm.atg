COMPILER DCasm

    public Generator gen;
    public Block currentBlock;

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  hexa = "ABCDEFabcdef0123456789".
  notQuote   = ANY - '"' - "\r\n".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  hex = "0x" hexa {hexa}.
  reg = "$" digit {digit}.
  ident  = letter {letter | digit}.
  number = digit {digit}.
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  semicolon = ';'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

//------------------------------------------------------//
DCasm
= block { block } 
EOF     (.Block.preGenerate();.).
//------------------------------------------------------//


//------------------------------------------------------//
block
=
"{"                         (.currentBlock = new Block();.)
( core { core } | softcfg ) 
"}"
[ "->"
ident						(.Console.WriteLine(t.val); currentBlock.name = t.val;.)
]
							(.currentBlock.addBlock();.)
.
//------------------------------------------------------//


//------------------------------------------------------//
core
=
(.Instruction inst = new Instruction("");.)
(
("mov"          (.inst = new Instruction("mov");.)
reg             (. inst.addArg(t.kind,t.val); .) ","
(hex | number)  (. inst.addArg(t.kind,t.val); inst.create(); .))
|
(("add" | "sub" | "mul" | "div" | "mup")          (.inst = new Instruction(t.val);.)
reg             (. inst.addArg(t.kind,t.val); .) ","
reg             (. inst.addArg(t.kind,t.val); .) ","
reg             (. inst.addArg(t.kind,t.val);.))
|
(("comp" | "gpo" | "gpi" | "lw" | "sw")          (.inst = new Instruction(t.val); .)
reg             (. inst.addArg(t.kind,t.val); .) ","
reg             (. inst.addArg(t.kind,t.val);.))
|
(("jmp" | "bra" | "jgt" | "jeq" | "jlt")        (.inst = new Instruction(t.val);.)
reg             		(. inst.addArg(t.kind,t.val);.))
|
"call" ident (.inst = new Instruction("mov"); inst.addArg(t.kind,t.val); inst.create(); currentBlock.addInstruction(inst);
				inst = new Instruction("call"); inst.addArg(t.kind,t.val); .)
|
"return" (.inst = new Instruction(t.val);.)
|
"lbl" ident (.inst = new Instruction("label"); inst.addArg(t.kind,t.val); inst.machineCodeSize = 0;.)    
)
(.inst.create(); currentBlock.addInstruction(inst);.)
.
//------------------------------------------------------//


//------------------------------------------------------//
// will be used later
softcfg
=
"soft" "{"		(.Console.WriteLine("softcore config");.)
"}".
//------------------------------------------------------//


END DCasm.
