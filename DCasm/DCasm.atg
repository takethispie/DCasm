COMPILER DCasm

    public Generator gen;
    public Block currentBlock;
    public int adress = 0;

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  hexa = "ABCDEFabcdef0123456789".
  notQuote   = ANY - '"' - "\r\n".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  hex = "0x" hexa {hexa}.
  reg = "$" digit {digit}.
  ident  = letter {letter | digit}.
  number = digit {digit}.
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  semicolon = ';'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

//------------------------------------------------------//
DCasm
= block { block }
EOF     (.Block.preGenerate(); gen.generate(Block.blocks);.).
//------------------------------------------------------//


//------------------------------------------------------//
block
=
"{"                         (.currentBlock = new Block(); currentBlock.startAdress = adress;.)
	core
	{
		core
	}
"}"
[ "->"
	ident						(.currentBlock.name = t.val;.)
]
(.currentBlock.addBlock();.)
.
//------------------------------------------------------//


//------------------------------------------------------//
core
=
(.Instruction inst = new Instruction(""); int instSize = 1;.)
(
	(
		"mov"          (. inst = new Instruction("mov"); .)
		reg             (. inst.param = Utils.getRegValue(t.val); inst.param = "00000"; .) ","
		(
			hex (.inst.param = Utils.bin(t.val, 16);.)
			|
			number (.inst.param = Utils.getRegValue(t.val);.)
		)
	)
|
	(
		("add" | "sub" | "mul" | "div" | "mup")          (.inst = new Instruction(t.val);.)
		reg             (. inst.param = Utils.getRegValue(t.val); .) ","
		reg             (. inst.param = Utils.getRegValue(t.val); .) ","
		reg             (. inst.param = Utils.getRegValue(t.val); .)
        //SHAMT
        [ number          (.inst.shamt = t.val; .) ]
	)
|
	(
		("comp" | "gpo" | "gpi" | "lw" | "sw")          (.inst = new Instruction(t.val); .)
		reg             (. inst.param = Utils.getRegValue(t.val); .) ","
		reg             (. inst.param = Utils.getRegValue(t.val); .)
        (.if(inst.op == "lw" || inst.op == "sw"){.)
            [number       (.inst.shamt = t.val;.)]
        (.}.)
	)
|
	(
		("jmp" | "bra" | "jgt" | "jeq" | "jlt")        (.inst = new Instruction(t.val);.)
		reg             		(. inst.param = Utils.getRegValue(t.val);.)
	)
|
	"call" ident (.inst = new Instruction("mov"); inst.param = "call"; inst.param = t.val;
					currentBlock.addInstruction(inst); currentBlock.addBlockRef(t.val); currentBlock.onBlockRes += inst.onBlckResolution;
                   adress++; inst.create(); inst = new Instruction("call"); inst.param = "call";
                   inst.param = t.val; currentBlock.addBlockRef(t.val); currentBlock.onBlockRes += inst.onBlckResolution;.)
|
	"return" (.inst = new Instruction(t.val);.)
|
	"lbl" ident (.instSize = 0; currentBlock.addLabel(t.val,adress);.)
)
(. if(instSize > 0){ inst.create(); currentBlock.addInstruction(inst); adress += instSize;} .)
.
//------------------------------------------------------//


END DCasm.
