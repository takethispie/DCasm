COMPILER DCasm
	const int undef = 0, ident = 1, number = 2, hex = 3;

    public CodeGenerator gen;
    public Block currentBlock;
    public int adress = 0;
    public I_ISA CurrentISA;
    public CommandBuilder CBuild = new CommandBuilder();

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  hexa = "ABCDEFabcdef0123456789".
  notQuote   = ANY - '"' - "\r\n".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  hex = "0x" hexa {hexa}.
  reg = "$" digit {digit}.
  ident  = letter {letter | digit}.
  number = digit {digit}.
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  semicolon = ';'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

//------------------------------------------------------//
DCasm
= block { block }
EOF
.
//------------------------------------------------------//


//------------------------------------------------------//
block =
ident  		(. currentBlock = new Block(t.val); .)
"->" 
"{"
	{ core
	}
"}" 		(. Block.Program.Add(currentBlock); .)
.
//------------------------------------------------------//


//------------------------------------------------------//
core =            (. string value = "null"; int type = -1; .)
(
  arithm	
| varDecl
| "call" ident 
| "return" 
| "out" expr<out type, out value>
| "in" ident
).
//------------------------------------------------------//


//------------------------------------------------------//
arithm =						(. string value = "null"; string value2 = ""; int type = -1; .)
ident 							(. if(!currentBlock.LocalSymbols.SymbolExist(t.val)) { SemErr("the variable name does not exists !"); } .)
"=" expr<out type, out value> 					
[ ("+" | "-" | "*" | "/") 
expr<out type, out value2>
] ";".

//------------------------------------------------------//


//------------------------------------------------------//
expr<out int type, out string value> = 		(. type = undef; value = "";.)
(ident 					(. type = ident; value = t.val; .)
| number 				(. type = number; value = t.val; .)
| hex					(. type = hex; value = t.val; .)
).
//------------------------------------------------------//


//------------------------------------------------------//
varDecl =
"var" ident 				(. currentBlock.LocalSymbols.Add(t.val,SymbolType.Var); /*use factory to construct instruction builder*/ .)
";"
.
//------------------------------------------------------//
END DCasm.